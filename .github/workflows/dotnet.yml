# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Test .NET projects

on:
  push:
    paths-ignore:
      - "**/*.docs"
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"

  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      auth0-domain: dummy-domain.auth0.com
      auth0-client-id: dummy-client-id
      auth0-client-secret: dummy-client-secret

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: |
            src/Web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: src/Web
        run: npm install

      - name: Build Tailwind CSS
        working-directory: src/Web
        run: npm run build:css

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run all tests in all test projects
        id: run-tests
        run: |
          # Ensure repository-level test-results exists
          mkdir -p "test-results"
          timestamp=$(date +%s)

          set -o pipefail

          overall_rc=0

          # Find all test projects recursively
          while IFS= read -r proj; do
            if grep -q "<IsTestProject>true</IsTestProject>" "$proj" 2>/dev/null; then
              name=$(basename "$proj" .csproj)
              echo "Running tests for: $proj -> test-results/${name}.trx (logs -> test-results/${name}.coverage.log)"
              set +e
              dotnet test "$proj" \
                --no-build --no-restore \
                --collect:"XPlat Code Coverage" \
                --logger "trx;LogFileName=${name}.trx" \
                --logger "junit;LogFileName=${name}.coverage.opencover.xml" \
                --results-directory "test-results" 2>&1 | tee "test-results/${name}.log"
              rc=$?
              set -e

              if [ "$rc" -ne 0 ]; then
                echo "dotnet test failed for $proj (exit code $rc)"
                overall_rc=$rc
              fi
            else
              echo "Skipping non-test project: $proj"
            fi
          done < <( find . -type f -name "*.csproj" )

          echo "tests_exit_code=$overall_rc" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Solution-Test-Results
          path: test-results

      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        with:
          name: Test-Logs
          path: ${{ github.workspace }}/test-results/**/*.log

      - name: Codecov
        uses: codecov/codecov-action@v5.5.0

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: test-results/**/*.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        id: test-results
        if: always()
        with:
          files: |
            test-results/**/*.trx

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: "6.3"

      - name: Use GitVersion
        id: gitversion # step id used as a reference for output values
        uses: gittools/actions/gitversion/execute@v4.1.0

      - run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: Fail on test failures
        if: always()
        run: |
          # If the run-tests step exported a non-zero exit code, fail now
          tests_exit_code=${{ steps.run-tests.outputs.tests_exit_code }}
          echo "tests_exit_code=$tests_exit_code"
          if [ "$tests_exit_code" != "0" ]; then
            echo "Tests failed with exit code $tests_exit_code"
            exit $tests_exit_code
          fi
